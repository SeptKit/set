name: _install
on:
  workflow_call:
    outputs:
      cache-key:
        description: 'Cache key for shell node_modules'
        value: ${{ jobs.cache-and-install-shell.outputs.cache-key }}

jobs:
  check-fileio:
    name: Check if fileio version exists in npm registry
    uses: ./.github/workflows/_check-if-npm-version-exists.yml
    with:
      package-name: fileio

  install-fileio-dependencies:
    name: Install fileio dependencies
    needs: check-fileio
    if: needs.check-fileio.outputs.npm_version_exists == 'false'
    uses: ./.github/workflows/_install.yml
    with:
      package-name: fileio

  build-fileio:
    name: Build fileio
    needs:
      - check-fileio
      - install-fileio-dependencies
    if: needs.check-fileio.outputs.npm_version_exists == 'false'
    uses: ./.github/workflows/_build.yml
    with:
      package-name: fileio

  check-ui:
    name: Check if ui version exists in npm registry
    uses: ./.github/workflows/_check-if-npm-version-exists.yml
    with:
      package-name: ui

  install-ui-dependencies:
    name: Install ui dependencies
    needs: check-ui
    if: needs.check-ui.outputs.npm_version_exists == 'false'
    uses: ./.github/workflows/_install.yml
    with:
      package-name: ui

  build-ui:
    name: Build ui
    needs:
      - check-ui
      - install-ui-dependencies
    if: needs.check-ui.outputs.npm_version_exists == 'false'
    uses: ./.github/workflows/_build.yml
    with:
      package-name: ui

  cache-and-install-shell:
    runs-on: ubuntu-latest
    needs:
      - check-fileio
      - build-fileio
      - check-ui
      - build-ui
    if: always()

    permissions:
      contents: write

    outputs:
      cache-key: ${{ steps.cache-node-modules.outputs.cache-hit }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 10.10.0
          run_install: false

      - name: Setup node_modules Cache
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: packages/shell/node_modules
          key: ${{ runner.os }}-node-modules-shell-${{ hashFiles( '**/packages/shell/pnpm-lock.yaml' ) }}

      # hacky way to enforce fetching from npm registry if fileio version exists in npm registry
      - name: Delete fileio folder
        if: needs.check-fileio.outputs.npm_version_exists == 'true'
        run: |
          echo "Fileio version exists in npm registry"
          echo "Deleting fileio folder to enforce fetching from npm registry"
          rm -rf packages/fileio

      # TODO: Extract the restore build output part into a separate custom action
      - name: Extract fileio version
        id: fileio-version
        working-directory: packages/fileio
        if: needs.check-fileio.outputs.npm_version_exists == 'false'
        run: |
          VERSION=$(grep version package.json | sed 's/.*"version": "\(.*\)".*/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Restore fileio build output cache
        uses: actions/cache@v3
        if: needs.check-fileio.outputs.npm_version_exists == 'false'
        with:
          path: 'packages/fileio/dist'
          key: ${{ runner.os }}-build-output-fileio-${{ hashFiles( '**/packages/fileio/pnpm-lock.yaml', '**/packages/fileio/src/**', '**/packages/fileio/package.json' ) }}-${{ steps.fileio-version.outputs.version }}

      - name: Verify fileio build output exists
        if: needs.check-fileio.outputs.npm_version_exists == 'false'
        run: ls -la 'packages/fileio/dist'

      # hacky way to enforce fetching from npm registry if ui version exists in npm registry
      - name: Delete ui folder
        if: needs.check-ui.outputs.npm_version_exists == 'true'
        run: |
          echo "ui version exists in npm registry"
          echo "Deleting ui folder to enforce fetching from npm registry"
          rm -rf packages/ui

      - name: Extract ui version
        id: ui-version
        working-directory: packages/ui
        if: needs.check-ui.outputs.npm_version_exists == 'false'
        run: |
          VERSION=$(grep version package.json | sed 's/.*"version": "\(.*\)".*/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Restore ui build output cache
        uses: actions/cache@v3
        if: needs.check-ui.outputs.npm_version_exists == 'false'
        with:
          path: 'packages/ui/dist'
          key: ${{ runner.os }}-build-output-ui-${{ hashFiles( '**/packages/ui/pnpm-lock.yaml', '**/packages/ui/src/**', '**/packages/ui/package.json' ) }}-${{ steps.ui-version.outputs.version }}

      - name: Verify ui build output exists
        if: needs.check-ui.outputs.npm_version_exists == 'false'
        run: ls -la 'packages/ui/dist'

      - name: Install dependencies
        run: pnpm install --filter=./packages/shell --ignore-scripts
        if: steps.cache-node-modules.outputs.cache-hit != 'true' || needs.check-fileio.outputs.npm_version_exists == 'false' || needs.check-ui.outputs.npm_version_exists == 'false'

      - name: Get Playwright Version
        id: playwright-version
        working-directory: packages/shell
        run: echo "playwright_version=$(node -e "console.log(require('./package.json').devDependencies['playwright'])")" >>  $GITHUB_OUTPUT

      - name: Setup Playwright Cache
        uses: actions/cache@v3
        id: cache-playwright
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ steps.playwright-version.outputs.playwright_version }}

      - name: Install Playwright
        if: steps.cache-playwright.outputs.cache-hit != 'true'
        working-directory: packages/shell
        run: npx playwright install chromium --with-deps
