name: _test

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      package-name: # the scripts appends the `packages/` part. eg.: shell is enough
        required: true
        type: string

jobs:
  # TODO: Extract these checks together with the restore build output part below into a separate custom action
  check-fileio:
    name: Check if fileio version exists in npm registry
    if: ${{ inputs.package-name == 'shell' }}
    uses: ./.github/workflows/_check-if-npm-version-exists.yml
    with:
      package-name: fileio

  check-ui:
    name: Check if ui version exists in npm registry
    if: ${{ inputs.package-name == 'shell' }}
    uses: ./.github/workflows/_check-if-npm-version-exists.yml
    with:
      package-name: ui

  test:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs:
      - check-fileio
      - check-ui
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.10.0
          run_install: false

      - name: Restore node_modules cache
        uses: actions/cache@v3
        with:
          path: packages/${{inputs.package-name}}/node_modules
          key: ${{ runner.os }}-node-modules-${{inputs.package-name}}-${{ hashFiles( format('**/packages/{0}/pnpm-lock.yaml',inputs.package-name) ) }}

      - name: Get Playwright Version
        id: playwright-version
        working-directory: packages/${{ inputs.package-name }}
        run: echo "playwright_version=$(node -e "console.log(require('./package.json').devDependencies['playwright'])")" >>  $GITHUB_OUTPUT

      - name: Restore Playwright cache
        id: playwright-cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ steps.playwright-version.outputs.playwright_version }}

      # TODO: Extract the restore build output part into a separate custom action
      - name: Extract fileio version
        id: fileio-version
        working-directory: packages/fileio
        if: ${{ inputs.package-name == 'shell' }} && needs.check-fileio.outputs.npm_version_exists == 'false'
        run: |
          VERSION=$(grep version package.json | sed 's/.*"version": "\(.*\)".*/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Restore fileio build output cache
        uses: actions/cache@v3
        if: ${{ inputs.package-name == 'shell' }} && needs.check-fileio.outputs.npm_version_exists == 'false'
        with:
          path: 'packages/fileio/dist'
          key: ${{ runner.os }}-build-output-${{ hashFiles( '**/packages/fileio/pnpm-lock.yaml', '**/packages/fileio/src/**', '**/packages/fileio/package.json' ) }}-${{ steps.fileio-version.outputs.version }}

      - name: Verify fileio build output exists
        if: ${{ inputs.package-name == 'shell' }} && needs.check-fileio.outputs.npm_version_exists == 'false'
        run: ls -la 'packages/fileio/dist'

      - name: Extract ui version
        id: ui-version
        working-directory: packages/ui
        if: ${{ inputs.package-name == 'shell' }} && needs.check-ui.outputs.npm_version_exists == 'false'
        run: |
          VERSION=$(grep version package.json | sed 's/.*"version": "\(.*\)".*/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Restore ui build output cache
        uses: actions/cache@v3
        if: ${{ inputs.package-name == 'shell' }} && needs.check-ui.outputs.npm_version_exists == 'false'
        with:
          path: 'packages/ui/dist'
          key: ${{ runner.os }}-build-output-${{ hashFiles( '**/packages/ui/pnpm-lock.yaml', '**/packages/ui/src/**', '**/packages/ui/package.json' ) }}-${{ steps.ui-version.outputs.version }}

      - name: Verify ui build output exists
        if: ${{ inputs.package-name == 'shell' }} && needs.check-ui.outputs.npm_version_exists == 'false'
        run: ls -la 'packages/ui/dist'

      - name: Run Tests
        run: pnpm test
        working-directory: packages/${{ inputs.package-name }}
